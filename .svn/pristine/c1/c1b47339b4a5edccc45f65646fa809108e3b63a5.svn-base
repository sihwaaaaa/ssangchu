package kr.co.poetrypainting.service;

import kr.co.poetrypainting.domain.AddressVO;
import kr.co.poetrypainting.domain.EmailAuthVO;
import kr.co.poetrypainting.domain.MemberVO;
import kr.co.poetrypainting.domain.dto.LoginDTO;
import kr.co.poetrypainting.domain.dto.MemberModifyDto;
import kr.co.poetrypainting.mapper.AddressMapper;
import kr.co.poetrypainting.mapper.EmailAuthMapper;
import kr.co.poetrypainting.mapper.MemberMapper;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.extern.log4j.Log4j;
import lombok.extern.slf4j.Slf4j;
import org.mindrot.bcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * packageName    : kr.co.poetrypainting.service
 * fileName       : MemberServiceImpl
 * author         : 방한솔
 * date           : 2023/04/06
 * description    : 회원 서비스
 * ===========================================================
 * DATE              AUTHOR             NOTE
 * -----------------------------------------------------------
 * 2023/04/06        방한솔             최초 생성
 * 2023/04/11        방한솔             가입시 기본 주소정보 저장기능 추가
 * 2023/04/12        방한솔             비밀번호 오류 수정
 * 2023/04/13        방한솔             이메일 인증 추가
 */
@Service
@AllArgsConstructor
@Slf4j
public class MemberServiceImpl implements MemberService {
    private final MemberMapper memberMapper;

    private final AddressMapper addressMapper;

    private final EmailAuthMapper emailAuthMapper;

    @Override
    @Transactional
    public int register(MemberVO memberVO, AddressVO addressVO) {
        // 아이디 중복 확인
        // 닉네임 중복 확인
        // 패스워드 일치여부 확인

        memberVO.setPassword(BCrypt.hashpw(memberVO.getPassword(), BCrypt.gensalt()));

        long result = (long) memberMapper.insert(memberVO);

        addressVO.setMemberNo(memberVO.getMemberNo());

        addressMapper.insertSelectkey(addressVO);

        return (int)result;
    }

    @Override
    public MemberVO login(LoginDTO loginDto) {


        MemberVO inputMember = MemberVO.builder()
                .memberId(loginDto.getMemberId())
                .password(loginDto.getPassword())
                .build();

        String memberId = inputMember.getMemberId();


        MemberVO searchMember = memberMapper.getByMemberId(memberId);

        MemberVO result = null;

        if(searchMember == null) {
            return null;
        }
        // log.info("memberVO.getPassword() : {}", inputMember.getPassword());
        // log.info("searchMember.getPassword() : {}", searchMember.getPassword());


        boolean checkpw = BCrypt.checkpw(inputMember.getPassword(), searchMember.getPassword());

        log.info("checkpw : {}", checkpw);

        if (checkpw) {
            result = searchMember;
        }

        return result;
    }

    @Override
    public List<MemberVO> getList() {
        return memberMapper.getList();
    }

    @Override
    public int modify(MemberModifyDto MemberModifyDto) {
        // 닉네임 중복확인

        return memberMapper.update(MemberModifyDto);
    }

    @Override
    public int passwordChange(MemberVO memberVO) {
        // 이전 비밀번호 확인

        // 새 비밀번호 양식 validation 확인
        // 비밀번호, 비밀번호 확인 일치여부 확인



        return 0;
    }

    @Override
    public int withdraw(MemberVO memberVO) {
        // 비밀번호 확인

        int result = memberMapper.delete(memberVO.getMemberNo());

        return result;
    }


    @Override
    public Boolean idCheck(String memberId){
        MemberVO member = memberMapper.getByMemberId(memberId);

        log.info("{}", member);

        // member가 있다 -> 값이 존재함 -> false
        // member가 없다 -> 값이 존재하지않음 -> true
        return member == null;
    }

    @Override
    public Boolean nickCheck(String nickname) {
        MemberVO member = memberMapper.getByNickname(nickname);

        return member == null;
    }

    @Override
    public Boolean emailAuthCheck(String email, String code) {
        EmailAuthVO recentOne = emailAuthMapper.getRecentOne(email);

        return recentOne != null && recentOne.getCode().equals(code);
    }

    @Override
    public MemberVO searchMember(Long memberNo) {
        return memberMapper.get(memberNo);
    }
}
