package kr.co.poetrypainting.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.xml.ws.spi.http.HttpHandler;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.co.poetrypainting.domain.dto.AttachDTO;
import lombok.extern.log4j.Log4j;
import net.coobird.thumbnailator.Thumbnails;
import net.coobird.thumbnailator.geometry.Positions;

@Controller
@Log4j
public class FileController {
	private static final String PATH = "c:/upload";

	@PostMapping(value="uploadAjax", produces=MediaType.APPLICATION_JSON_VALUE)@ResponseBody
	public List<AttachDTO> uploadAjax(MultipartFile[] files){
		List<AttachDTO> list = new ArrayList<>();
		File uploadPath = new File(PATH, getFolder());
		if(!uploadPath.exists()){
			uploadPath.mkdirs();
		}
		
		for (MultipartFile m : files) {
			//실제 스트림 전송
			
			String uuidStr = UUID.randomUUID().toString();
			String tName = uuidStr + "_" + m.getOriginalFilename();
			String attName = m.getOriginalFilename().substring(m.getOriginalFilename().lastIndexOf("."));
			File f = new File(uploadPath, tName);
			
			
			
			File f2 = new File(uploadPath, "s_" + tName);
			try {
				Thumbnails.of(f).crop(Positions.CENTER).size(260, 280).toFile(f2);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			AttachDTO dto = new AttachDTO();
			dto.setAttUuid(uuidStr);
			dto.setAttPath(getFolder());
			dto.setAttOrigin(m.getContentType());
			dto.setAttName(attName);
			list.add(dto);
			log.info(list);
		}
		return list;
	}
	@GetMapping("deleteFile") @ResponseBody
	public String deleteFile(AttachDTO dto){
		log.info(dto);
		
		String s = PATH + "/" + dto.getAttPath() + "/" + dto.getAttUuid() + "_" + dto.getAttName() + "." + dto.getAttOrigin();
		
		File file = new File(s);
		file.delete();
	
			s = PATH + "/" + dto.getAttPath() + "/s_"  + dto.getAttUuid() + "_" + dto.getAttName() + "." + dto.getAttOrigin();
			file = new File(s);
			file.delete();
					
		
		return dto.getAttUuid();
	}
	@GetMapping("display") @ResponseBody
	public ResponseEntity<byte[]> display(AttachDTO dto, Boolean thumb){//소문자면 파라미터 무조건 있어야하기때문에 매퍼클래스 사용
		//fileName : path + uuid + name
		String s = PATH + "/" + dto.getAttPath() + "/" + (thumb != null && thumb ? "s_": "") + dto.getAttUuid() + "_" + dto.getAttName() + "." + dto.getAttOrigin();;
		File file = new File(s);
		ResponseEntity<byte[]> result = null;
		try {
			HttpHeaders headers = new HttpHeaders();
			headers.add("Content-Type", Files.probeContentType(file.toPath()));
			result = new ResponseEntity<>(FileCopyUtils.copyToByteArray(file), headers, HttpStatus.OK);//에러 없애주껭
		} catch (IOException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	@GetMapping("download") @ResponseBody
	public ResponseEntity<byte[]> download(AttachDTO dto){//소문자면 파라미터 무조건 있어야하기때문에 매퍼클래스 사용
		//fileName : path + uuid + name
		String s = PATH + "/" + dto.getAttPath() + "/" + dto.getAttUuid() + "_" + dto.getAttName()+  "." + dto.getAttOrigin();
		File file = new File(s);
		ResponseEntity<byte[]> result = null;
		try {
			HttpHeaders headers = new HttpHeaders();
			headers.add("Content-Type", MediaType.APPLICATION_OCTET_STREAM_VALUE);
			headers.add("Content-Disposition","attachment; filename=" + new String(dto.getAttName().getBytes("utf-8"), "iso-8859-1"));
			result = new ResponseEntity<>(FileCopyUtils.copyToByteArray(file), headers, HttpStatus.OK);//에러 없애주껭
		} catch (IOException e) {
			e.printStackTrace();
		}
		return result;
	}
	

//	
//	@GetMapping(value="dto", produces=MediaType.APPLICATION_JSON_VALUE) @ResponseBody//이게 언급되어있으면 jsp로 안나옴 이데이터의 순수타입이 나옴
//	public AttachFileDto getDto(){
//		AttachFileDto dto = new AttachFileDto();
//		dto.setImage(true);
//		dto.setName("파일명.jsp");
//		return dto;
//	}
	
	private String getFolder(){
		return new SimpleDateFormat("yyyy/MM/dd").format(new Date());
	}
	//file -> mime확인
//	private boolean isImage(File file) throws IOException{
//		List<String> excludes = Arrays.asList("ico","webp");
//		int idx = file.toString().lastIndexOf(".");
//		
//		if (idx == -1) {
//			return false;
//		}
//		String ext = file.toString().substring(idx+1);
//		if(excludes.contains(ext)){
//			return false;
//		}
//		
//		String mime = Files.probeContentType(file.toPath());
//		
//		return mime != null && mime.startsWith("image");
//	}
}
