package kr.co.poetrypainting.service;

import kr.co.poetrypainting.domain.MemberVO;
import kr.co.poetrypainting.mapper.MemberMapper;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import lombok.extern.log4j.Log4j;
import lombok.extern.slf4j.Slf4j;
import org.mindrot.bcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * packageName    : kr.co.poetrypainting.service
 * fileName       : MemberServiceImpl
 * author         : banghansol
 * date           : 2023/04/06
 * description    :
 * ===========================================================
 * DATE              AUTHOR             NOTE
 * -----------------------------------------------------------
 * 2023/04/06        banghansol       최초 생성
 */
@Service
@NoArgsConstructor
@AllArgsConstructor
@Slf4j
public class MemberServiceImpl implements MemberService {
    @Autowired
    private MemberMapper memberMapper;

    @Override
    public int register(MemberVO memberVO) {
        // 아이디 중복 확인
        // 닉네임 중복 확인
        // 패스워드 일치여부 확인

        memberVO.setPassword(BCrypt.hashpw("1234", BCrypt.gensalt()));

        int result = memberMapper.insert(memberVO);

        return result;
    }

    @Override
    public MemberVO login(MemberVO memberVO) {
        String memberId = memberVO.getMemberId();


        MemberVO searchMember = memberMapper.getByMemberId(memberId);

        MemberVO result = null;


        log.info("memberVO.getPassword() : {}", memberVO.getPassword());
        log.info("searchMember.getPassword() : {}", searchMember.getPassword());


        boolean checkpw = BCrypt.checkpw(memberVO.getPassword(), searchMember.getPassword());

        log.info("checkpw : {}", checkpw);

        if(checkpw){
            result = searchMember;
        }

        return result;
    }

    @Override
    public List<MemberVO> getList() {
        return memberMapper.getList();
    }

    @Override
    public int modify(MemberVO memberVO) {
        // 비밀번호 확인

        // 닉네임 중복확인

        return 0;
    }

    @Override
    public int passwordChange(MemberVO memberVO) {
        // 이전 비밀번호 확인

        // 새 비밀번호 양식 validation 확인
        // 비밀번호, 비밀번호 확인 일치여부 확인



        return 0;
    }

    @Override
    public int withdraw(MemberVO memberVO) {
        // 비밀번호 확인

        int result = memberMapper.delete(memberVO.getMemberNo());

        return result;
    }
}
